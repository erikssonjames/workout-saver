// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name          String?
    password      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    workouts      Workout[]
    userInfo      UserInfo?
}

model UserInfo {
    id               String   @id @default(cuid())
    user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String   @unique
    name             String
    age              Int
    height           Int
    heigthQuantifier String
    weight           Int
    weightQuantifier String
    gymInfo          GymInfo?
}

model GymInfo {
    id            String   @id @default(cuid())
    userInfo      UserInfo @relation(fields: [userInfoId], references: [id], onDelete: Cascade)
    userInfoId    String   @unique
    gymFrequency  String
    workoutType   String
    gainMuscle    Boolean
    loseFat       Boolean
    gainStrength  Boolean
    improveHealth Boolean
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Workout {
    id          String     @id @default(cuid())
    date        DateTime
    duration    Int
    description Int
    userId      String
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    setGroups   SetGroup[]
}

model SetGroup {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    workoutId String
    workout   Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    setInfos  SetInfo[]
}

model SetInfo {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    quantityType String
    quantity     Int
    weight       Int
    setGroupId   String
    setGroup     SetGroup @relation(fields: [setGroupId], references: [id], onDelete: Cascade)
    exerciseName String
    exercise     Exercise @relation(fields: [exerciseName], references: [exerciseName])
}

model Exercise {
    exerciseName String    @id
    muscleName   String
    targetMuscle Muscle    @relation(fields: [muscleName], references: [muscleName])
    setInfos     SetInfo[]
}

model Muscle {
    muscleName String     @id
    exercises  Exercise[]
}
